{"version":3,"sources":["assets/up-arrow.svg","assets/down-arrow.svg","assets/stock-icon.svg","components/StockCharts.js","components/Navigationbar.js","components/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","alpha","require","key","Styles","styled","div","TickerBarStyle","StockChart","props","state","data","isLoaded","ticker","this","polishedData","daily","then","util","polish","date","index","push","x","substring","y","parseFloat","setState","reverse","min","Infinity","max","i","length","console","log","parentData","xType","style","opacity","color","title","strokeWidth","strokeDasharray","Container","align","React","Component","TickerBar","changeInPrice","arrow","diff","upArrow","downArrow","percentage","className","toFixed","src","height","width","alt","NavigationBar","Navbar","expand","Brand","stockGraph","Toggle","aria-controls","Collapse","id","Nav","Item","Link","href","Sidebar","defaultActiveKey","Accordion","as","eventKey","fluid","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0eabad85.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/up-arrow.76424a01.svg\";","module.exports = __webpack_public_path__ + \"static/media/down-arrow.a6ced365.svg\";","module.exports = __webpack_public_path__ + \"static/media/stock-icon.8b46ab5b.svg\";","import React from 'react';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\nimport {\r\n  FlexibleXYPlot,\r\n  LineSeries,\r\n  LineMarkSeries,\r\n  HorizontalGridLines,\r\n} from 'react-vis';\r\nimport Container from 'react-bootstrap/Container';\r\nimport styled from 'styled-components';\r\nimport upArrow from '../assets/up-arrow.svg';\r\nimport downArrow from '../assets/down-arrow.svg'\r\n\r\n// Alphavantage API\r\nconst alpha = require('alphavantage')({ key: '5MGDJJF9CY2M60S6' });\r\n\r\n// Div style\r\nconst Styles = styled.div`\r\n  float: right;\r\n  padding-top: 4%;\r\n  padding-right: 2%;\r\n  bottom: 0;\r\n  right: 0;\r\n  left: 0;\r\n  height: 92%;\r\n  width: 92%;\r\n`;\r\n\r\nconst TickerBarStyle = styled.div`\r\n  .tickerbar {\r\n      padding-bottom: 4%;\r\n      float: left;\r\n      height: 2vh;\r\n      width: inherit;\r\n      padding-left: 2%;\r\n      color: #b0b0b0;\r\n  }\r\n\r\n  svg {\r\n    fill: red;\r\n  }\r\n\r\n`;\r\n\r\nclass StockChart extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      data: [],\r\n      isLoaded: false,\r\n      ticker: ''\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.state.isLoaded) {\r\n      let polishedData;\r\n      let data = [];\r\n      let ticker = 'TSLA';\r\n      // Fetch data from Alphavantage and transform\r\n      alpha.data.daily(ticker, 'compact')\r\n        .then(data => { polishedData = alpha.util.polish(data)['data'] })\r\n        .then(() => {\r\n          for (var date in polishedData) {\r\n            for (var index in polishedData[date]) {\r\n              if (index == 'close') {\r\n                data.push({ x: date.substring(0, 10), y: parseFloat(polishedData[date][index]) })\r\n              }\r\n            }\r\n          }\r\n        })\r\n        .then(() => {\r\n          this.setState({\r\n            data: data.reverse(),\r\n            isLoaded: true,\r\n            ticker: ticker\r\n          })\r\n        });\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    var { isLoaded, data, ticker } = this.state;\r\n\r\n    if (!isLoaded) {\r\n      return (\r\n        <Styles>\r\n          <Container>\r\n            <h1 align=\"center\">\r\n              <font color=\"#c0c0c0\">Loading stock data...</font>\r\n            </h1>\r\n          </Container>\r\n        </Styles>\r\n      )\r\n    }\r\n    else {\r\n\r\n      var min = Infinity, max = -Infinity;\r\n      for (var i = 0; i < this.state.data.length; i++) {\r\n        if (this.state.data[i].y < min) min = this.state.data[i].y;\r\n        if (this.state.data[i].y > max) max = this.state.data[i].y;\r\n      }\r\n\r\n      console.log(\"The data is loaded as:\", data, min, max);\r\n      return (\r\n\r\n        <Styles>\r\n          <TickerBar parentData={this.state} />\r\n          <FlexibleXYPlot\r\n            xType=\"ordinal\">\r\n            <HorizontalGridLines style={{ opacity: 0.1 }} />\r\n\r\n            <LineSeries\r\n              data={data}\r\n              color=\"#55eb7f\"\r\n              title=\"TSLA\"\r\n              style={\r\n                { strokeWidth: 2 }\r\n              } />\r\n\r\n            <LineSeries\r\n              data={[\r\n                { x: data[0].x, y: data[99].y },\r\n                { x: data[99].x, y: data[99].y }\r\n              ]}\r\n              color=\"#c0c0c0\"\r\n              style={\r\n                { strokeWidth: 2 },\r\n                { opacity: 0.2 },\r\n                { strokeLineJoin: \"round\" },\r\n                { strokeStyle: \"dashed\" },\r\n                { strokeDasharray: '15, 15' }\r\n\r\n              } />\r\n            <LineMarkSeries\r\n              data={[{ x: data[99].x, y: data[99].y }]}\r\n              color=\"#55eb7f\"\r\n            />\r\n          </FlexibleXYPlot>\r\n        </Styles>\r\n\r\n\r\n      )\r\n\r\n    }\r\n  }\r\n}\r\n\r\n\r\nclass TickerBar extends React.Component {\r\n\r\n  render() {\r\n    var { data, isLoaded, ticker } = this.props.parentData;\r\n    var changeInPrice, arrow;\r\n    if (isLoaded) {\r\n      var diff = data[99].y - data[98].y;\r\n\r\n      if (diff > 0) {\r\n        changeInPrice = \"#55eb7f\"\r\n        arrow = upArrow;\r\n      }\r\n      else if (diff == 0) {\r\n        changeInPrice = \"gray\"\r\n      }\r\n      else {\r\n        changeInPrice = \"red\"\r\n        arrow = downArrow;\r\n      }\r\n\r\n\r\n\r\n      var percentage = (diff / data[99].y) * 100;\r\n      return (\r\n        <TickerBarStyle >\r\n          <Container className=\"tickerbar\">\r\n            <h1>\r\n              {ticker} &#x2758; &#x24;{data[99].y} <font color={changeInPrice}>\r\n                {diff.toFixed(2)} &#x28;{percentage.toFixed(2)}%&#x29;</font> <img src={arrow} height=\"35\" width=\"35\" alt=\"\" />\r\n            </h1>\r\n          </Container>\r\n\r\n        </TickerBarStyle>\r\n      )\r\n    }\r\n    else {\r\n      return (<div></div>)\r\n    }\r\n  }\r\n};\r\n\r\nexport default StockChart;\r\n","import React from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport stockGraph from '../assets/stock-icon.svg'\r\n\r\nconst Styles = styled.div`\r\n    .navbar {\r\n        position: absolute;\r\n        background-color: #222;\r\n        position: absolute;\r\n        width: 100vw;\r\n    }\r\n\r\n    .navbar-brand, .navbar-nav .nav-link {\r\n        color: #bbb;\r\n        \r\n        &:hover {\r\n            color: white;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default class NavigationBar extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Styles>\r\n                <Navbar expand=\"lg\">\r\n                    <Navbar.Brand>\r\n                        <img\r\n                            alt=\"\"\r\n                            src={stockGraph}\r\n                            width=\"30\"\r\n                            height=\"30\"\r\n                            className=\"d-inline-block align-top\"\r\n                        />{' '}\r\n                        StockPrices</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"ml-auto\">\r\n                            <Nav.Item><Nav.Link href=\"https://www.github.com/davidbmadsen/stockprice\">GitHub</Nav.Link></Nav.Item>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </Styles>\r\n        )\r\n    }\r\n};","import React from 'react';\r\nimport { Nav, Card, Accordion, Container } from 'react-bootstrap';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n    .flex-column {\r\n        background-color: #1a1616;\r\n        position: absolute;\r\n        width: 7vw;\r\n        height: 100vh;\r\n        padding-top: 4%;\r\n    }\r\n\r\n    .nav-link {\r\n        color: #bbb;\r\n        \r\n        &:hover {\r\n            color: #55eb7f;\r\n        }\r\n    }\r\n\r\n    .container {\r\n        color: #bbb;\r\n        background-color: #222;\r\n    }\r\n`;\r\n\r\nexport default class Sidebar extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Styles>\r\n                <Nav defaultActiveKey=\"/home\" className=\"flex-column\">\r\n                    <Accordion>\r\n                        <Accordion.Toggle as={Nav.Link} eventKey=\"0\">\r\n                            <Nav.Link align=\"center\"><h5>Stocks</h5></Nav.Link>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Container fluid>More stocks coming soon!</Container>\r\n                        </Accordion.Collapse>\r\n                    </Accordion>\r\n\r\n                    <Accordion>\r\n                        <Accordion.Toggle as={Nav.Link} eventKey=\"0\">\r\n                            <Nav.Link align=\"center\"><h5>Crypto</h5></Nav.Link>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Container fluid>Sorry, the crypto bubble is over...</Container>\r\n                        </Accordion.Collapse>\r\n                    </Accordion>\r\n                </Nav>\r\n            </Styles>\r\n        )\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport StockChart from './components/StockCharts';\r\nimport NavigationBar from './components/Navigationbar';\r\nimport Sidebar from './components/Sidebar';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"site-box\">\r\n          <Sidebar />\r\n          <StockChart />\r\n          <NavigationBar />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//<StockChart />","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}